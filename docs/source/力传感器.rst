力传感器
=============
.. contents:: 目录

力传感器
-------------
力传感器，指的是六维力传感器，可以实时读取X、Y、Z方向的力和绕X、绕Y、绕Z方向的力矩，可通过RS485与上位机通信，在上位机二次开发的串口接收程序中实时读取六维力传感器数据，注意，会有一个串口协议，即传感器发来数据的格式，一般厂家会在说明书里提供这个，需要根据串口协议编写对应的接收程序。

示例代码
------------
uart.h
~~~~~~~~
::

    #ifndef UART_H
    #define UART_H

    #include <windows.h>
    #include <stdio.h>
    #include <thread>
    #include <chrono>
    #include <mutex>
    #include <cstdint>
    #include "kdm.h"
    #include "kalmanfilter.h"
    #include "g_pay.h"

    char* serial_port_send();
    char* serial_port_stop();
    void serial_port_read();
    void serial_port_send_read();
    float bytes_to_float(BYTE* bytes);
    void process_frame_data(MeaFt *meaft, BYTE* frameData);
    void process_buffer_data();
    HANDLE OpenSerialPort(const char *portName);

    #endif // UART_H

uart.cpp
~~~~~~~~~~~
::

    #include "uart.h"

    // 全局变量和互斥锁
    static BYTE buffer1[56];
    static BYTE buffer2[56];
    static bool useBuffer1 = true;
    std::mutex bufferMutex;

    // 测量力/力矩解算函数
    void process_frame_data(BYTE* frameData)
    {
        // 解算Fx, Fy, Fz, Mx, My, Mz
        meaft.fx = bytes_to_float(&frameData[2]);
        meaft.fy = bytes_to_float(&frameData[6]);
        meaft.fz = bytes_to_float(&frameData[10]);
        meaft.tx = bytes_to_float(&frameData[14]);
        meaft.ty = bytes_to_float(&frameData[18]);
        meaft.tz = bytes_to_float(&frameData[22]);
    }

    // 处理缓冲区数据的函数
    void process_buffer_data()
    {
        while (true) {
            BYTE* currentBuffer;
            {
                std::lock_guard<std::mutex> lock(bufferMutex);
                currentBuffer = useBuffer1 ? buffer2 : buffer1;
            }

            // 查找并处理所有符合条件的帧
            for (DWORD i = 0; i < 56 - 27; ++i) {
                if (currentBuffer[i] == 0x48 && currentBuffer[i+1] == 0xAA) {
                    BYTE* frameStart = &currentBuffer[i];
                    BYTE* frameEnd = NULL;
                    for (DWORD j = i + 27; j < 56; ++j) {
                        if (currentBuffer[j-1] == 0x0D && currentBuffer[j] == 0x0A) {
                            frameEnd = &currentBuffer[j];
                            break;
                        }
                    }
                    if (frameEnd != NULL && (frameEnd - frameStart + 1) == 28) {
                        static BYTE frameData[28];
                        memcpy(frameData, frameStart, 28);

                        process_frame_data(frameData);
                        i = frameEnd - currentBuffer; // 更新索引以避免重复处理
                    }
                }
            }

            // 处理频率
            std::this_thread::sleep_for(std::chrono::milliseconds(1));
        }
    }

    /*启动串口通信函数*/
    HANDLE OpenSerialPort(const char *portName)
    {
        // 将const char*转换为LPCWSTR
        wchar_t wPortName[28];
        MultiByteToWideChar(CP_ACP, 0, portName, -1, wPortName, 28);

        HANDLE hSerial = CreateFileW(wPortName, GENERIC_READ | GENERIC_WRITE, 0, NULL, OPEN_EXISTING, 0, NULL);
        if (hSerial == INVALID_HANDLE_VALUE) {
            printf("Error opening serial port\n");
            return INVALID_HANDLE_VALUE;
        }

        DCB dcbSerialParams = {0};
        dcbSerialParams.DCBlength = sizeof(dcbSerialParams);
        if (!GetCommState(hSerial, &dcbSerialParams)) {
            printf("Error getting state\n");
            CloseHandle(hSerial);
            return INVALID_HANDLE_VALUE;
        }

        dcbSerialParams.BaudRate = 460800;
        dcbSerialParams.ByteSize = 8;
        dcbSerialParams.StopBits = ONESTOPBIT;
        dcbSerialParams.Parity = NOPARITY;

        if (!SetCommState(hSerial, &dcbSerialParams)) {
            printf("Error setting state\n");
            CloseHandle(hSerial);
            return INVALID_HANDLE_VALUE;
        }

        return hSerial;
    }

    /*串口读取函数*/
    void serial_port_read()
    {
        //启动串口通信
        HANDLE hSerial = OpenSerialPort("COM3");
        if (hSerial == INVALID_HANDLE_VALUE)
        {
            printf("Error opening serial port, error code: %lu\n", GetLastError());
            return;;
        }

        //设置读取数据参数
        DWORD bytesRead;
        OVERLAPPED osReader = { 0 };
        osReader.hEvent = CreateEvent(NULL, TRUE, FALSE, NULL);
        if (osReader.hEvent == NULL)
        {
            printf("Error creating overlapped event, error code: %lu\n", GetLastError());
            CloseHandle(hSerial);
            return;
        }

        //循环读取串口数据
        while (true) {
            // 选择当前使用的缓冲区
            BYTE* currentBuffer;
            {
                std::lock_guard<std::mutex> lock(bufferMutex);
                currentBuffer = useBuffer1 ? buffer1 : buffer2;
            }

            // 读取串口数据
            BOOL result = ReadFile(hSerial, currentBuffer, sizeof(buffer1), &bytesRead, &osReader);
            if (!result) {
                if (GetLastError() == ERROR_IO_PENDING) {
                    // 等待读取完成
                    WaitForSingleObject(osReader.hEvent, INFINITE);
                    GetOverlappedResult(hSerial, &osReader, &bytesRead, TRUE);
                } else {
                    printf("Error reading from serial port, error code: %lu\n", GetLastError());
                    CloseHandle(hSerial);
                    CloseHandle(osReader.hEvent);
                    return;
                }
            }

            // 切换缓冲区
            {
                std::lock_guard<std::mutex> lock(bufferMutex);
                useBuffer1 = !useBuffer1;
            }

            // 1kHz的频率读取
            std::this_thread::sleep_for(std::chrono::milliseconds(1));
        }

        //关闭串口通信
        CloseHandle(hSerial);
        CloseHandle(osReader.hEvent);
    }

    // 将字节数组转换为浮点数
    float bytes_to_float(BYTE* bytes)
    {
        uint32_t asInt = (bytes[3] << 24) | (bytes[2] << 16) | (bytes[1] << 8) | bytes[0];
        float asFloat;
        memcpy(&asFloat, &asInt, sizeof(asFloat));
        return asFloat;
    }
