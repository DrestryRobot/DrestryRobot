负载辨识
==========
.. contents:: 目录

负载辨识
-----------
负载辨识，输入若干组六维力传感器的读数和姿态数据，通过最小二乘法和矩阵运算等手段，获得零点力、零点力矩、工具重力及工具质心等重力补偿参数。

负载辨识计算公式如下：`[参考链接] <https://blog.csdn.net/qq_43756951/article/details/139727968>`_

.. math::

    \mathcal{F}_S=\mathcal{F}_0+\mathcal{F}_S{}^{(G)}+\mathcal{F}_S{}^{(e)}

负载辨识代码实现
-----------------
.h头文件
~~~~~~~~~
.. code:: c++

    #ifndef G_PAY_H
    #define G_PAY_H

    #include <stdio.h>
    #include "math.h"
    #include <iostream>
    #include <iomanip>

    #define DATACOUNT 4 // 导入6组数据

    // 六维力传感器零点漂移值
    typedef struct {
        double fx;
        double fy;
        double fz;
        double tx;
        double ty;
        double tz;
    } ZeroFt;

    // 六维力传感器测量值
    typedef struct {
        double fx;
        double fy;
        double fz;
        double tx;
        double ty;
        double tz;
    } MeaFt;

    // 六维力传感器补偿值
    typedef struct {
        double fx;
        double fy;
        double fz;
        double tx;
        double ty;
        double tz;
    } PayFt;

    typedef struct {
        double data[3];
    } Vector3;

    typedef struct {
        double data[6];
    } Vector6;

    // 欧拉角结构体
    struct EulerAngles {
        double rx, ry, rz;
    };

    void zero_init(ZeroFt *ft, double fx, double fy, double fz, double tx, double ty, double tz);
    void pay_calculate(PayFt *payft, MeaFt *meaft, ZeroFt *zeroft);
    //void leastSquares(double A[DATACOUNT][6], Vector3 b[DATACOUNT], Vector6 x);
    Vector6 leastSquares(double A[DATACOUNT * 3][6], Vector3 b[DATACOUNT]);
    void loadIdentification(Vector6 fS[DATACOUNT], double rSB[DATACOUNT][3][3],double *G, Vector3 *p, Vector6 *F0, double *U, double *V);
    void computeCompensatedForce(Vector6 *fS, Vector6 F0, double G, Vector3 p, double rSB[3][3], double U, double V, Vector6 *fComp);

    void printResults(double *G, Vector3 *p, Vector6 *F0, double *U, double *V);

    void invertMatrix3x3(double m[3][3], double inv[3][3]);
    void eulerAnglesToRotationMatrixXYZ(const EulerAngles& e, double R[3][3]);
    void crossProductMatrix(double F[3], double F_cross[3][3]);
    void printMatrix3x3(const char* name, double matrix[DATACOUNT][3][3]);
    void printMatrixAorB(const char* name, double matrix[DATACOUNT * 3][6]);
    void printVector3(const char* name, double vector[DATACOUNT][3]);
    void printVector6Array(const char* name, Vector6 vector[DATACOUNT]);
    void printVector3Array(const char* name, Vector3 vector[DATACOUNT * 3]);
    void printVector6(const char* name, Vector6 vector);
    void printVector3Single(const char* name, double vector[3]);

    extern ZeroFt zeroft;
    extern MeaFt meaft;
    extern PayFt payft;

    #endif // G_PAY_H

.cpp源文件
~~~~~~~~~~~~~
.. code:: c++

    #include "g_pay.h"

    ZeroFt zeroft;
    MeaFt meaft;
    PayFt payft;

    /*零点漂移初始化*/
    void zero_init(ZeroFt *ft, double fx, double fy, double fz, double tx, double ty, double tz)
    {
        ft->fx = fx;
        ft->fy = fy;
        ft->fz = fz;
        ft->tx = tx;
        ft->ty = ty;
        ft->tz = tz;
    }

    /*重力补偿计算函数*/
    void pay_calculate(PayFt *payft, MeaFt *meaft, ZeroFt *zeroft)
    {
        payft->fx = meaft->fx - zeroft->fx;
        payft->fy = meaft->fy - zeroft->fy;
        payft->fz = meaft->fz - zeroft->fz;
        payft->tx = meaft->tx - zeroft->tx;
        payft->ty = meaft->ty - zeroft->ty;
        payft->tz = meaft->tz - zeroft->tz;

        // 设置阈值
        double threshold = 0.01;

        //计算 payft 并进行阈值判断
        if (payft->fx < threshold && payft->fx > -threshold) {
            payft->fx = 0;
        }
        if (payft->fy < threshold && payft->fy > -threshold) {
            payft->fy = 0;
        }
        if (payft->fz < threshold && payft->fz > -threshold) {
            payft->fz = 0;
        }
        if (payft->tx < threshold && payft->tx > -threshold) {
            payft->tx = 0;
        }
        if (payft->ty < threshold && payft->ty > -threshold) {
            payft->ty = 0;
        }
        if (payft->tz < threshold && payft->tz > -threshold) {
            payft->tz = 0;
        }

    }

    /**
    * 最小二乘法求解方程组
    * @param A 系数矩阵
    * @param b 常数项向量
    * @param x 解向量
    */
    Vector6 leastSquares(double A[DATACOUNT * 3][6], Vector3 b[DATACOUNT]) {
        double At[6][DATACOUNT * 3];
        double AtA[6][6] = {0};
        Vector6 Atb = {0}; // 修改为 Vector6 类型
        Vector6 x;

        // 计算转置矩阵 At
        for (int i = 0; i < DATACOUNT * 3; ++i) {
            for (int j = 0; j < 6; ++j) {
                At[j][i] = A[i][j];
            }
        }

        // 计算 At * A
        for (int i = 0; i < 6; ++i) {
            for (int j = 0; j < 6; ++j) {
                for (int k = 0; k < DATACOUNT * 3; ++k) {
                    AtA[i][j] += At[i][k] * A[k][j];
                }
            }
        }

        // 计算 At * b
        for (int i = 0; i < 6; ++i) {
            for (int j = 0; j < DATACOUNT * 3; ++j) {
                Atb.data[i] += At[i][j] * b[j / 3].data[j % 3];
            }
        }

        // 使用高斯消去法解方程 AtA * x = Atb
        for (int i = 0; i < 6; ++i) {
            for (int j = i + 1; j < 6; ++j) {
                if (AtA[i][i] == 0) { // 检查是否为零枢轴元素
                    std::cerr << "Zero pivot encountered at row " << i << std::endl;
                }
                double ratio = AtA[j][i] / AtA[i][i];
                for (int k = 0; k < 6; ++k) {
                    AtA[j][k] -= ratio * AtA[i][k];
                }
                Atb.data[j] -= ratio * Atb.data[i];
            }
        }
        for (int i = 5; i >= 0; --i) {
            if (AtA[i][i] == 0) { // 检查是否为零枢轴元素
                std::cerr << "Zero pivot encountered at row " << i << std::endl;
            }
            x.data[i] = Atb.data[i];
            for (int j = i + 1; j < 6; ++j) {
                x.data[i] -= AtA[i][j] * x.data[j];
            }
            x.data[i] /= AtA[i][i];
        }

        return x;
    }

    /**
    * 负载辨识
    * @param fS 传感器测量值
    * @param f0 零点值
    * @param rSB 旋转矩阵
    * @param G 工具重力
    * @param p 工具质心坐标
    * @param F0 零点力/力矩
    * @param U,V 安装倾角
    */
    void loadIdentification(Vector6 fS[DATACOUNT], double rSB[DATACOUNT][3][3],double *G, Vector3 *p, Vector6 *F0, double *U, double *V)
    {
        double rSB_inv[DATACOUNT][3][3];
        double A[DATACOUNT * 3][6];
        double B[DATACOUNT * 3][6];
        double F[DATACOUNT][3];
        double F_cross[3][3];
        Vector6 f[DATACOUNT];
        Vector3 b[DATACOUNT];
        Vector3 d[DATACOUNT];
        Vector6 a;
        Vector6 c;

        // 计算逆旋转矩阵
        for (int i = 0; i < DATACOUNT; ++i)
        {
            invertMatrix3x3(rSB[i], rSB_inv[i]);
        }

        // A矩阵求解（多姿态下的逆旋转矩阵->A矩阵）
        for (int i = 0; i < DATACOUNT; ++i)
        {
            for (int j = 0; j < 3; ++j)
            {
                A[3 * i + j][0] = rSB_inv[i][j][0];
                A[3 * i + j][1] = rSB_inv[i][j][1];
                A[3 * i + j][2] = rSB_inv[i][j][2];
                A[3 * i + j][3 + j] = 1.0; // 单位矩阵I
            }

            // 工具重力在S坐标系下的值
            for (int j = 0; j < 6; ++j)
            {
                f[i].data[j] = fS[i].data[j];
            }
            for (int j = 0; j < 3; ++j)
            {
                F[i][j]=fS[i].data[j];
            }
        }

        // B矩阵求解（测量力向量叉乘矩阵->B矩阵）
        for (int i = 0; i < DATACOUNT; ++i) {
            // 计算叉乘矩阵
            crossProductMatrix(F[i], F_cross);

            for (int j = 0; j < 3; ++j) {
                for (int k = 0; k < 3; ++k) {
                    B[3*i + j][k] = -F_cross[j][k]; // 负叉乘矩阵
                    B[3*i + j][k + 3] = (j == k) ? 1.0 : 0.0; // 单位矩阵
                }
            }
        }

        // 工具重力在S坐标系下的力和力矩
        for (int i = 0; i < DATACOUNT; ++i)
        {
            for (int j=0; j < 3; ++j)
            {
                b[i].data[j] = f[i].data[j];
                d[i].data[j] = f[i].data[j+3];
            }
        }

        // 最小二乘法解方程组
        a = leastSquares(A, b);
        c = leastSquares(B, d);

        // 工具重量计算
        *G = sqrt(a.data[0] * a.data[0] + a.data[1] * a.data[1] + a.data[2] * a.data[2]);

        // 工具质心计算
        p->data[0] = c.data[0];
        p->data[1] = c.data[1];
        p->data[2] = c.data[2];

        // 零点力的计算
        F0->data[0] = a.data[3];
        F0->data[1] = a.data[4];
        F0->data[2] = a.data[5];

        // 零点力矩计算
        F0->data[3] = c.data[3] - (F0->data[1] * p->data[2] - F0->data[2] * p->data[1]);
        F0->data[4] = c.data[4] - (F0->data[2] * p->data[0] - F0->data[0] * p->data[2]);
        F0->data[5] = c.data[5] - (F0->data[0] * p->data[1] - F0->data[1] * p->data[0]);

        // 安装倾角计算
        *U = asin(-a.data[1] / *G);
        *V = atan2(-a.data[0], -a.data[2]);
    }

    /**
    * 计算力传感器测量值的补偿值
    * @param fS 传感器测量值
    * @param F0 零点力/力矩
    * @param G 工具重力
    * @param p 工具质心坐标
    * @param rSB 旋转矩阵
    * @param U 安装俯仰角
    * @param V 安装翻滚角
    * @param fComp 最终补偿值
    */
    void computeCompensatedForce(Vector6 *fS, Vector6 F0, double G, Vector3 p, double rSB[3][3], double U, double V, Vector6 *fComp)
    {
        Vector6 fG; // 工具重力在传感器坐标系下的力/力矩
        //double g[3] = {0, 0, -G}; // 假设重力向量在工具坐标系下为 (0, 0, G)
        double g[3] = {G * cos(U) * sin(V), -G * sin(U), -G * cos(U) * cos(V)}; // 计算重力分量
        double rSB_inv[3][3];

        invertMatrix3x3(rSB, rSB_inv);

        // 计算重力在传感器坐标系下的力
        for (int i = 0; i < 3; ++i) {
            fG.data[i] = 0;
            for (int j = 0; j < 3; ++j) {
                fG.data[i] += rSB_inv[i][j] * g[j];
            }
        }

        // 计算重力在传感器坐标系下的力矩
        fG.data[3] = p.data[1] * fG.data[2] - p.data[2] * fG.data[1];
        fG.data[4] = p.data[2] * fG.data[0] - p.data[0] * fG.data[2];
        fG.data[5] = p.data[0] * fG.data[1] - p.data[1] * fG.data[0];

        // 计算最终补偿值
        for (int j = 0; j < 6; ++j)
        {
            fComp->data[j] = fS->data[j] - F0.data[j] - fG.data[j];
            //printf("%f\n",fS->data[j]);
        }

        // 打印补偿值
        //printVector6("fcomp", *fComp);
    }

    // 负载辨识结果打印函数
    void printResults(double *G, Vector3 *p, Vector6 *F0, double *U, double *V)
    {
        // 打印工具重量
        printf("G:%f\n", *G);

        // 打印工具质心坐标
        printf("p:(%f, %f, %f)\n", p->data[0], p->data[1], p->data[2]);

        // 打印零点力
        printf("F0:(%f, %f, %f)\n", F0->data[0], F0->data[1], F0->data[2]);

        // 打印零点力矩
        printf("N0:(%f, %f, %f)\n", F0->data[3], F0->data[4], F0->data[5]);

        // 打印安装倾角
        printf("U:%f\n", *U);
        printf("V:%f\n\n", *V);
    }

    // 计算3x3矩阵的逆矩阵
    void invertMatrix3x3(double m[3][3], double inv[3][3])
    {
        double det = m[0][0] * (m[1][1] * m[2][2] - m[2][1] * m[1][2]) -
                    m[0][1] * (m[1][0] * m[2][2] - m[2][0] * m[1][2]) +
                    m[0][2] * (m[1][0] * m[2][1] - m[2][0] * m[1][1]);

        if (det == 0) {
            printf("Matrix is singular and cannot be inverted.\n");
            return;
        }

        double invDet = 1.0 / det;

        inv[0][0] = (m[1][1] * m[2][2] - m[2][1] * m[1][2]) * invDet;
        inv[0][1] = (m[0][2] * m[2][1] - m[0][1] * m[2][2]) * invDet;
        inv[0][2] = (m[0][1] * m[1][2] - m[0][2] * m[1][1]) * invDet;
        inv[1][0] = (m[1][2] * m[2][0] - m[1][0] * m[2][2]) * invDet;
        inv[1][1] = (m[0][0] * m[2][2] - m[0][2] * m[2][0]) * invDet;
        inv[1][2] = (m[1][0] * m[0][2] - m[0][0] * m[1][2]) * invDet;
        inv[2][0] = (m[1][0] * m[2][1] - m[2][0] * m[1][1]) * invDet;
        inv[2][1] = (m[2][0] * m[0][1] - m[0][0] * m[2][1]) * invDet;
        inv[2][2] = (m[0][0] * m[1][1] - m[1][0] * m[0][1]) * invDet;
    }

    // 将欧拉角转换为旋转矩阵（ZYX 顺序）
    void eulerAnglesToRotationMatrixXYZ(const EulerAngles& e, double R[3][3])
    {
        double cx = cos(e.rx * M_PI / 180);
        double sx = sin(e.rx * M_PI / 180);
        double cy = cos(e.ry * M_PI / 180);
        double sy = sin(e.ry * M_PI / 180);
        double cz = cos(e.rz * M_PI / 180);
        double sz = sin(e.rz * M_PI / 180);

        R[0][0] = cz * cy;
        R[0][1] = cz * sy * sx - sz * cx;
        R[0][2] = cz * sy * cx + sz * sx;

        R[1][0] = sz * cy;
        R[1][1] = sz * sy * sx + cz * cx;
        R[1][2] = sz * sy * cx - cz * sx;

        R[2][0] = -sy;
        R[2][1] = cy * sx;
        R[2][2] = cy * cx;
    }

    // 力向量的叉乘矩阵
    void crossProductMatrix(double F[3], double F_cross[3][3]) {
        F_cross[0][0] = 0;
        F_cross[0][1] = -F[2];
        F_cross[0][2] = F[1];
        F_cross[1][0] = F[2];
        F_cross[1][1] = 0;
        F_cross[1][2] = -F[0];
        F_cross[2][0] = -F[1];
        F_cross[2][1] = F[0];
        F_cross[2][2] = 0;
    }

    void printMatrix3x3(const char* name, double matrix[DATACOUNT][3][3]) {
        printf("%s:\n", name);
        for (int i = 0; i < DATACOUNT; ++i) {
            for (int j = 0; j < 3; ++j) {
                for (int k = 0; k < 3; ++k) {
                    printf("%f ", matrix[i][j][k]);
                }
                printf("\n");
            }
            printf("\n");
        }
    }

    void printMatrixAorB(const char* name, double matrix[DATACOUNT * 3][6]) {
        printf("%s:\n", name);
        for (int i = 0; i < DATACOUNT * 3; ++i) {
            for (int j = 0; j < 6; ++j) {
                printf("%f ", matrix[i][j]);
            }
            printf("\n");
        }
    }

    void printVector3(const char* name, double vector[DATACOUNT][3]) {
        printf("%s:\n", name);
        for (int i = 0; i < DATACOUNT; ++i) {
            for (int j = 0; j < 3; ++j) {
                printf("%f ", vector[i][j]);
            }
            printf("\n");
        }
    }

    void printVector6Array(const char* name, Vector6 vector[DATACOUNT]) {
        printf("%s:\n", name);
        for (int i = 0; i < DATACOUNT; ++i) {
            for (int j = 0; j < 6; ++j) {
                printf("%f ", vector[i].data[j]);
            }
            printf("\n");
        }
    }

    void printVector3Array(const char* name, Vector3 vector[DATACOUNT]) {
        printf("%s:\n", name);
        for (int i = 0; i < DATACOUNT; ++i) {
            for (int j = 0; j < 3; ++j) {
                printf("%f ", vector[i].data[j]);
            }
            printf("\n");
        }
    }

    void printVector6(const char* name, Vector6 vector) {
        printf("%s:", name);
        for (int i = 0; i < 6; ++i) {
            printf("%f ", vector.data[i]);
        }
        printf("\n");
    }

    void printVector3Single(const char* name, double vector[3]) {
        printf("%s:\n", name);
        for (int i = 0; i < 3; ++i) {
            printf("%f ", vector[i]);
        }
        printf("\n");
    }
